try:
    from ._types import ChangeType, ResourceType  # NOQA; facades the _types module.
except ImportError:
    pass

CHANGE_TYPE_URL = (
    'https://hg.orthanc-server.com/orthanc-python/raw-file/tip/'
    'Sources/Autogenerated/sdk_OrthancPluginChangeType.impl.h')

CHANGE_TYPE_REGEX = 'sdk_OrthancPluginChangeType_Type.*"([A-Z_]+)".*\(([0-9]+)\)'

RESOURCE_TYPE_URL = (
    'https://hg.orthanc-server.com/orthanc-python/raw-file/tip/'
    'Sources/Autogenerated/sdk_OrthancPluginResourceType.impl.h')

RESOURCE_TYPE_REGEX = 'sdk_OrthancPluginResourceType_Type.*"([A-Z_]+)".*\(([0-9]+)\)'

if __name__ == '__main__':
    import ast
    import datetime
    import os.path
    import re
    import sys

    import httpx

    if not hasattr(ast, 'unparse'):
        print(
            'This script relies on the `unparse` function to be present. '
            'It should be in Python 3.9 and up.')
        sys.exit(1)

    def _enum_ast_from_items(name: str, items: list[tuple[str, str]]) -> ast.ClassDef:
        constants = []
        for (key, value) in items + [('UNKNOWN', '999')]:
            constants.append(
                ast.Assign(
                    targets=[ast.Name(id=key, ctx=ast.Store())],
                    value=ast.Constant(value=int(value)),
                    lineno=None))
        new_enum_ast = ast.ClassDef(
            name=name,
            bases=[ast.Name(id='enum.IntEnum', ctx=ast.Load())],
            keywords=[],
            body=[constants],
            decorator_list=[])
        return new_enum_ast

    response = httpx.get(CHANGE_TYPE_URL)
    response.raise_for_status()
    changetype_enum = _enum_ast_from_items(
        'ChangeType', re.findall(CHANGE_TYPE_REGEX, response.text))

    response = httpx.get(RESOURCE_TYPE_URL)
    response.raise_for_status()
    resourcetype_enum = _enum_ast_from_items(
        'ResourceType', re.findall(RESOURCE_TYPE_REGEX, response.text))

    module = ast.Module(
        body=[ast.Import(names=[ast.alias('enum')]), resourcetype_enum, changetype_enum],
        type_ignores=[])

    filename = os.path.join(os.path.dirname(__file__), '_types.py')
    with open(filename, 'w') as source_file:
        now = datetime.datetime.utcnow().isoformat() + 'Z'
        source_file.write(f'# Generated at {now}\n')
        source_file.write(f'# from {RESOURCE_TYPE_URL} and\n')
        source_file.write(f'# from {CHANGE_TYPE_URL}\n')
        source_file.write('\n')
        source_file.write(ast.unparse(module))
        source_file.write('\n')
